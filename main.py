# main.py
import threading
import time
from assistant_brain.brain import initialize_brain, generate_general_greeting  # noqa: F401
from assistant_brain.hotkeys_manager import initialize_hotkeys_manager
from assistant_output.voice_output_eng import SpeechModuleENG
from assistant_output.voice_output_rus import SpeechModuleRUS
from assistant_tools.utils import play_sfx
from assistant_vector_database.database import initialize_database
from assistant_general.general_settings import choose_language

play_sfx('hard_processing')

initialize_brain() # вызывает subscribe("USER_SPEECH", generate_response), чтобы не импортировать сразу весь brain
initialize_database()
initialize_hotkeys_manager()

while True: 
    print("\nPlease, choose language for V.E.G.A.")
    command = input("'1' - russian, '2' - english, '3' - exit \n\n>> ")

    if command == "1": # Если русский язык
        play_sfx("select")
        speech_module = SpeechModuleRUS()
        speech_module.start()
        choose_language("RUSSIAN")
        break

    if command == "2": # Если английский язык 
        play_sfx("select")
        speech_module = SpeechModuleENG()
        speech_module.start()
        choose_language("ENGLISH")
        break

    if command == "3":
        play_sfx("unknown_command")
        print("Exit from the V.E.G.A. system.")
        exit()

    else:
        print("Invalid mode. Please try again.")

# generate_general_greeting() # Можно закомментировать, чтобы не мешало тестированию

# Настроить чертово логирование, отправлять в них вопросы пользователя и ответы Веги

# Передавать в брифинг информацию о канале, например, количество подписчиков, последние посты и т.д. (можно также передавать прошлые наблюдения о канале, чтобы Вега могла анализировать динамику развития канала)

# Реализовать просмотр текущих чатов в телеграме и анализ их Вегой (например, чтобы Вега могла помочь ответить на вопросы в чате или предложить идеи для обсуждения)

while True:
    input_mode = input("\nSelect the input mode ('1' - voice, '2' - text, '3' - output): ")
    if input_mode == "1":
        from assistant_input.voice_input import SpeechListener
        play_sfx("select")
        speech_listener = SpeechListener()
        speech_listener.start()
        break 

    elif input_mode == "2":
        from assistant_input.text_input import text_input_loop
        play_sfx("select")
        text_thread = threading.Thread(target=text_input_loop)
        text_thread.daemon = True
        text_thread.start()
        break 

    elif input_mode == "3":
        print("Logout from the V.E.G.A. system")
        exit()

    else:
        print("Incorrect mode. Please try again.")

# ЛОГГИРОВАТЬ В КРАТКОВРЕМЕННУЮ ПАМЯТЬ - ЧТО ТАМ ХРАНИТСЯ, КОГДА ВЕГА ЧТО-ТО ЗАПИСЫВАЕТ ИЛИ УДАЛЯЕТ
# ЛОГГИРОВАТЬ В КРАТКОВРЕМЕННУЮ ПАМЯТЬ - при каких условиях Вегой было сказаны фразы (например, помечать в скобках "фраза была сказана функцией спонтанных мыслей")

# Передавать Веге названия всех плейлистов Foobar2000 и их содержание

# Скачать Rammstein в Foobar2000.
# Уменьшать громкость остальных звуков при речи Веги, чтобы не перебивала её

# Передавать в любой запрос Веги логи последних действий, чтобы она понимала контекст

# def all_sensors_and_information(): не забыть

# Реализовать запрос "Вега, сделай средний по размеру пост в наш канал о новых технологиях, а то что-то давно в канал ничего не публиковали. Порыскай на сайтах с актуальными новостями о новых технологиях, которые мы не затрагивали в нашем канале. Потом скопируй в буфер обмена содержание поста."
# Для этого нужно:
# 1) Навык парсинга новостных сайтов (например, TechCrunch, The Verge, Wired, Ars Technica, Hacker News, Slashdot, Gizmodo, Engadget, CNET, ZDNet)
# 2) Навык создания постов для телеграм-канала (с возможностью копирования в буфер обмена), хотя можно и просто просить копировать в буфер обмена

# Дать возможность Веге исказть любую информацию/новости, не только с Hubr
# Например, при запросе "Вега, какие там новые нейросети вышли?" - она искала эту информацию

# Также сделать так, чтобы из памяти выводились все факты по поводу моего канала (для анализа текущего состояния и планирования новых публикаций)
# Также пригодится, чтобы Веге передавалась текущая переписка с помощью навыка (описать в промпте, когда нужно применять его)

# Создать лист текущих задач: при простом диалоге Вега не должна оправлять флажок, а вот для важных задач и тех, которые не решаются здесь и сейчас (по типу "Вега, мониторь этот сайт на предмет новой информации")
# Вега применяет навык и оправляет флажок в этот файл, который будет просматриваться каждые 2 минуты
# Для этого нужно:
# 1) Навык создания/удаления/просмотра текущих задач (флажков)
# 2) Фоновая функция, которая каждые 2 минуты проверяет наличие новых флажков и выполняет их (вызывает навык мониторинга сайта, навык поиска информации и т.д.)


# дать Веге инструмент вспомнить информацию из памяти САМОЙ
# Например, Вега может сказать: "Сэр, вы упоминали, что хотите написать статью о новых технологиях. Могу я помочь вам с этим?"


# Случайные проактивные взаимодействия:
# Раз в случайное количество времени дается запрос к Веге с перечей ВСЕХ текущих датчиков: погода, время и дата, новости, логи внутренних диалогов, текущие процессы на пк, контекст экрана, ... , ... , всю картину мира
# В итоге Вега будет говорить что-нибудь интересное. ПРомпт можно начать со слов 
# "Ты заскучала. Ты - операционная система Сэра, и вот датчики: ... , вот кратковременная память: ... . Ты можешь делать что угодно: например, вызвать функцию вспоминания чего-либо из базы данных, просмотреть телеграм канал Сэра, посмотреть новости, погоду, время и дату, текущие процессы на ПК, контекст экрана и т.д.
# Ты можешь делать предложения Сэру, рассказывать интересные факты, шутить, предлагать помощь в работе и т.д. Главное - проявлять инициативу и быть полезной."

# Написать отдельную функцию, которая получает прогноз погоды на ЧАС
#(Minutely Forecast) - для осадков на ближайший час
# Этот API-ответ дает очень детальный прогноз осадков на ближайший час с шагом в одну минуту. Это самый точный способ узнать, начнется ли дождь или снег в течение следующего часа.
# Особенности:
# Данные на 60 минут вперед.
# Только информация об интенсивности осадков.
# Недоступно для всех локаций в мире.

# Разобраться с проблемой, когда Вега, допустим, записывает в память, однако отвечает после function calling = None.
# Пример:
# 2025-10-18 21:12:17,890 - google_genai.types - [WARNING] - Warning: there are non-text parts in the response: ['function_call'], returning concatenated text result from text parts. Check the full candidates.content.parts accessor to get the full model response.
# V.E.G.A.: None
# Тут она вызвала добавить в память новый факт, но в итоге ответила ничего, так как когда находится вызов функции - в дальнейшем коде нет проверки на текстовые части
# Для этого нужно:
# 1) Либо в коде, который обрабатывает ответ от модели, нужно проверять, есть ли текстовые части, и если есть - выводить их, даже если есть вызов функции




# ПОМОГИТЕ, СЛИШКОМ МНОГО ЗАДАЧ!

try:
    while True:
        time.sleep(1)
        # Для фоновых задач

        # Анализ погоды
        # Что делает: Через API погоды (например, OpenWeatherMap) проверяет прогноз на сегодня и завтра

        # Анализ новостей
        # Что делает: Проверяет новости на наличие важных событий, которые могут повлиять на планы пользователя

        # Анализ календаря
        # Что делает: Проверяет календарь пользователя на наличие предстоящих событий или встреч

        # Анализ системных ресурсов
        # Что делает: Мониторит использование CPU, памяти и диска, чтобы предупредить пользователя о возможных проблемах

except KeyboardInterrupt:
    print("\nThe program is ending.")
