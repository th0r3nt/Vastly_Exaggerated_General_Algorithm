# Когда-нибудь, когда-нибудь
import schedule
import time
import random

def test():
    print("test")

def start_scheduler():
    # Запускать проактивную проверку каждые n минут
    random_minytes = random.randint(5, 10)
    print(f"Функция будет вызвана через: {random_minytes} минут.")
    schedule.every(random_minytes).minutes.do(test)

    while True:
        schedule.run_pending()
        time.sleep(1)

        # В main.py:
        # ...
        # scheduler_thread = threading.Thread(target=start_scheduler, daemon=True)
        # scheduler_thread.start()
        # ...
        # # Теперь основной цикл while True: time.sleep(1) не нужен,
        # # программа будет жить, пока работают потоки.



# Анализ погоды. Что делает: Через API погоды (например, OpenWeatherMap) проверяет прогноз на сегодня и завтра (Изменено: передавать эти данные в отдельную функцию "ты заскучала, ...", так будет более эффективно)
# Анализ новостей. Что делает: Проверяет новости на наличие важных событий, которые могут повлиять на планы пользователя (Изменено: передавать эти данные в отдельную функцию "ты заскучала, ...", так будет более эффективно)
# Анализ календаря. Что делает: Проверяет календарь пользователя на наличие предстоящих событий или встреч (Изменено: передавать эти данные в отдельную функцию "ты заскучала, ...", так будет более эффективно)
# Анализ системных ресурсов. Что делает: Мониторит использование CPU, памяти и диска, чтобы предупредить пользователя о возможных проблемах (Изменено: передавать эти данные в отдельную функцию "ты заскучала, ...", так будет более эффективно)


if __name__ == "__main__":
    start_scheduler()
    time.sleep(2)
    start_scheduler()


# В main.py:
# ...
# scheduler_thread = threading.Thread(target=start_scheduler, daemon=True)
# scheduler_thread.start()
# ...
# # Теперь основной цикл while True: time.sleep(1) не нужен,
# # программа будет жить, пока работают потоки.

